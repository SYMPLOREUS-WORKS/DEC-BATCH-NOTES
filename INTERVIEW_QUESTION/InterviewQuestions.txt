JDK,JVM,application architecture 
====================================
1.What is Web application?
2.What is framework?
3.What is the use of persistence layer,Service layer and repository layer?
4.Define http?
5.Difference between JDK,JRE,JVM?
6.What are feature of Java?
7.How Java supports platform independent feature?
8.What are components of JVM?
9.How to fix the OutOfMemory issue in Java?
 while running the application pass the arguments like :java -Xms512m -Xmx1024m YourApp or set JAVA_TOOL_OPTIONS and variable as size -Xms512m -Xmx1024m

10.What are command line arguments?
11.What is the role of execute engine?
12.Define the types of memories in Java?
13.What is Heap area/memory in Java?
14.Why java is know as robust and how we it achieves it?
15.Explain about the Garbage collector?
===============================================
Fundamentals Identifiers, Keywords, Datatypes, literals
1.What is an identifier?
2.What is implicit typecasting?
3.What is explicit typecasting?
4.What is a literal?
5.What is loss of precision? why it occurs?
6.Why float range is more than int even both have 4bytes ?
https://stackoverflow.com/questions/13542944/how-many-significant-digits-do-floats-and-doubles-have-in-java
7.What is the difference between primitive and non primitive datatypes?
8.what is difference between final and finally keyword?
9.Explain the use of this and super keywords?
10.How are identifiers different from keywords?
11.Why is $ or _ allowed in identifiers but not recommended?
==============================================================
Arrays,variables,methods
1.What is an array in java?
2.What are advantages and disadvantages of an array?
3.What is difference between length and length()?
4.What are common exceptions occurs while dealing with arrays? How to avoid it?
5.What is an instance variable?
6.List the memories in JVM?
7.What is the scope of instance variable?
8.What is the difference between static method and instance method?
9.How static variable is different to instance variable?
10.Explain the use of different memory areas in JAVA?
11.Difference between the stack memory and heap memory?
12.What happens to the object after execution of a method?
13.Can we access an instance variable from the static area? Justify
14.Can we access an static fields from the instance area? Justify
15.Explain the scopes of instance ,static and local variables?
16. Explain how the String[] args parameter of the main method is created in Java.
===============================================================
operators and control statements
1.What is the difference between while loop and do-while loop?
2.Explain the scenerios where we can use the while loop?
3.Explain the behaviour of + operator?
4.What is the difference between pre-increment and post-increment operator?
5.What is the difference between & operator and && operator?
6.Explain about == operator?
7.What is the difference between == operator and equals() method?
8.Differnce between for loop and while loop?
9.Explain the work flow of for loop?
10.What is the difference between for loop and enhanced for loop?
11.Explain advantage of enhanced for loop?
12.How do shift operators (<<, >>, >>>) work in Java? Explain the difference between signed and unsigned shifts with examples.
13.How is the switch statement different from a series of if-else statements? Which one is more efficient?
14.Can a switch statement use String as a parameter? How does it work internally?
it uses hashcode and equals method for comparision
15.Can a switch statement use float as a parameter? Justify
16. What is the difference between break and continue? Provide an example
17.Can a for loop have multiple initialization and increment expressions? Provide an example.
18.What is the purpose of a default label in a switch statement? Is it mandatory to include it?
19.Explain the concept of "fall-through" in a switch statement. How can it be prevented?
20.Can break and continue be used inside a try-catch-finally block? If yes, how do they behave?
21.Can control statements like break or return be used inside a lambda expression? Why or why not?
Need to know about the stream api as well
22.What are all the datatypes applicable for the switch parameter?
23.Why float,double and long are not allowed as the switch parameter?If we have a scenario with float or double parameter how to use it 
24.How switch-case works wrt to primitives and Wrapper classes?
for primitives direct value comparision will happen
for wrappers it convert to primitive using auto unboxing 
25.Explain the comparision mechanism of switch-case w.r.t enum data type
It uses ordinal value for the comparision
26.Explain enhanced switch and yield keyword?
========================================================================
modifiers
1.What are access modifiers in Java? List them.
2.What is the difference between public, protected, default, and private access modifiers?
3.What is the default access modifier in Java if none is specified?
4.Can a top-level class be declared as private or protected? Why or why not?
5.What does the final modifier do for variables, methods, and classes?
6.What is the difference between static and final modifiers?
7.Can a class be declared as final? What are the implications?
8.What is the use of the static modifier in Java?
9.What does the abstract modifier mean for a class and a method?
10.What is the significance of the synchronized modifier in Java?
11.Can a method be declared as both abstract and final? Why or why not?
12.What is the difference between static and instance variables?
13.Can a constructor be declared as final, static, or abstract? Why?
14.What is the difference between transient and volatile modifiers in Java?
15.Can an interface method be declared as private or protected? Explain.
16.What happens if a final variable is not initialized?
17.What is the use of the native modifier in Java?
18.Can you override a private or static method in Java? Explain.
19.What is the difference between final and effectively final variables in Java?
20.Can a static method use non-static variables or methods directly? Why or why not?
21.What is the difference between synchronized and volatile in multithreading?
22.How do static blocks work in Java? When are they executed?
23.Can a final class be extended? If not, why?
24.How is the transient modifier used in serialization? Provide an example.
25.What are the key differences between volatile and atomic in Java?
26.Can you explain the role of strictfp in Java?
27.What is the purpose of the protected modifier in inheritance? How does it differ from default?
28.Can you use static methods in an interface? If yes, how is it different from default methods?
29.How do Java modifiers impact encapsulation and inheritance?
30.What are the implications of using final in Java's method arguments?
31.Write a program to demonstrate the difference between public, protected, default, and private access levels.
32.Show an example of how transient variables behave during serialization.
33.Write code to demonstrate the use of static and final together in a variable.
34.Create a multithreading example to illustrate the difference between synchronized and volatile.
35.Write a program to show the behavior of final methods in inheritance
=================================================================================

java source file structure

1.What is the standard structure of a Java source file? Can you explain each part?
2.What is the role of the package declaration in a Java source file? How does it affect the organization of classes?
3.How do you define a class in a Java source file, and what are the rules for naming a class?
4.What is the difference between a public class and a non-public class in terms of visibility and accessibility?
5.Can a Java source file contain multiple classes? If so, how are they organized within the file?
6.What is the significance of the import statement in a Java source file? How does it facilitate the use of classes from other packages?
7.What is the purpose of the main method in a Java application, and what is its signature?
8.Explain the difference between static and instance methods in the context of a Java class. How are they declared in the source file?
9.How do annotations fit into the structure of a Java source file? Can you provide an example of using annotations?
10.What are inner classes in Java? How are they defined within a source file?
11.How does the use of interfaces differ from abstract classes in Java? How are they defined in a source file?
12.What are the rules regarding file naming for Java source files, particularly in relation to public classes?
13.How can you specify the visibility of class members (fields and methods) in a Java source file? What are the different access modifiers available?
14.Can you explain the concept of JavaDoc comments? How are they structured, and why are they important?(writing the usage of the declared methods and what it does )
15.What is the difference between a Java source file and a compiled class file? What happens during the compilation process?
16.How do you handle exceptions in a Java source file? Can you explain the structure of try-catch blocks?
17.What is the purpose of constructors in Java? How are they defined within a class in a source file?
18.Can you explain how enums are defined in a Java source file? What is their purpose?
19.What is the role of the static block in a Java class, and how is it defined within a source file?
20.How can you use default access in Java, and how does it differ from other access modifiers?
=============================================================================

oops principles

encapsulation

1.What is encapsulation in Java?
2.How can you achieve encapsulation in a Java class?
3.What are access modifiers in Java, and how do they relate to encapsulation?
4.Can you provide an example of a simple Java class that demonstrates encapsulation?
5.Write a basic class with private fields and public getter and setter methods.
6.What are the advantages of encapsulation?
7.How does encapsulation improve the maintainability of code?
8.Can you explain how encapsulation relates to data hiding?
9.What happens if you try to access a private variable from outside its class?
10.How can encapsulation be implemented  with inheritance?
11.How to set the value of a private member?
12.Can you explain the difference between encapsulation and abstraction?
13.In what scenarios would you choose to use encapsulation over direct access to fields?
14.How does encapsulation affect the performance of a Java application?
15.What is immutable class in java? Write a code for custom immutable class?
16.Can you discuss the role of immutable objects in encapsulation?
17.How can encapsulation be applied in a multi-threaded environment?
abstraction
1.What is abstraction in Java?
2.

inheritance
1.What is inheritance in Java?
2.Explain types of inheritance?
3.What is the difference between extends and implements keyword?
4.What is use of super and this keyword?
5. How can you prevent a class from being inherited in Java?
6. How can you restrict inheritance of a class to only specific subclasses in Java?
7.Does java supports multiple inheritance? Explain Why or Why not?
8. Which access modifiers enhance the ability to inherit from a class in Java, and which ones restrict it?
9.In how many ways we can restrict the inheritance in java?
10. In what context is the permits keyword used in Java?

polymorphism
1.What is polymorphism?
2.What is overloading and overriding?
3.What is method hiding?
4.Can we override static methods? Explain Why or Why not?
5.Does overriding applicable for private methods? Explain 
6.
constructors
1.What is the us of constructor in Java?
2.What is default constructor in java?
3.What is difference between parameter less constructor and parameterized constructor?
4.What are the modifiers applicable for constructors?
5.
design patterns
static and instance flow


======================================================================================
exception handling

1.What is an exception in Java? How is it different from an error?
2.What is the difference between checked and unchecked exceptions in Java?
3.What are the keywords used for exception handling in Java?
4.What is the purpose of the finally block in Java?
5.What happens if no exception is thrown in the try block? Will the finally block execute?
6.Can we have multiple catch blocks for a single try block?
7.What is the difference between throw and throws in Java?
8.What happens if an exception is not caught in a program?
9.What is the default exception handler in Java?
10.Can a try block exist without a catch block?
11.What happens if there is an exception in the finally block?
12.Can you explain exception chaining in Java? Provide an example.
13.Can you override a method in Java and throw new or broader checked exceptions? Why or why not?
14.What is the purpose of the getCause() method in Java exceptions?
15.What is the difference between final, finally, and finalize()?
16.Explain the use of try-with-resources. Why is it preferred over traditional try-catch-finally?
17.Can we write multiple finally blocks for a single try block? Why or why not?
18.What is a suppressed exception? How do you manage it in Java?
19.What is the order of execution for try, catch, and finally blocks in Java? Provide a code example to explain.
20.Can a finally block prevent the propagation of an exception? How?
21.Explain how exception suppression works in Java when using try-with-resources. Provide a code example.
22.What happens if both catch and finally blocks throw exceptions? Which one is propagated?
23.How would you design a custom exception hierarchy to handle multiple layers of application-specific exceptions?
24.Write a program to demonstrate the difference between re-throwing an exception with and without modifying its stack trace.
25.How does Java internally handle exception propagation in a multi-threaded environment?
26.Can you provide an example of a scenario where using checked exceptions would be better than unchecked exceptions?
27.What is the difference between RuntimeException and Error in Java? Provide examples where each is appropriate.
28.Explain how StackOverflowError and OutOfMemoryError are handled in Java. Can they be caught? Why or why not?
29.Write code to demonstrate exception handling when dealing with nested try-catch-finally blocks. What happens if there’s an exception in the inner and outer blocks?
30.Explain the implications of exception handling on performance. How can you optimize exception handling in Java?
31. What are some best practices to prevent unchecked exceptions in Java?
32. How would you troubleshoot and resolve an internal server error encountered by a user when making a request to your application?
33. What are some common exceptions encountered when working with collection classes and thread-related operations in Java?
34. What are the key methods available for handling exceptions in Java?
35. Can you describe a scenario in which the finally block does not execute in Java?
=====================================================================================================================



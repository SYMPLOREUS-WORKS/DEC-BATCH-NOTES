JDK,JVM,application architecture 
====================================
1.What is Web application?
2.What is framework?
3.What is the use of persistence layer,Service layer and repository layer?
4.Define http?
5.Difference between JDK,JRE,JVM?
6.What are feature of Java?
7.How Java supports platform independent feature?
8.What are components of JVM?
9.How to fix the OutOfMemory issue in Java?
 while running the application pass the arguments like :java -Xms512m -Xmx1024m YourApp or set JAVA_TOOL_OPTIONS and variable as size -Xms512m -Xmx1024m

10.What are command line arguments?
11.What is the role of execute engine?
12.Define the types of memories in Java?
13.What is Heap area/memory in Java?
14.Why java is know as robust and how we it achieves it?
15.Explain about the Garbage collector?
===============================================
Fundamentals Identifiers, Keywords, Datatypes, literals
1.What is an identifier?
2.What is implicit typecasting?
3.What is explicit typecasting?
4.What is a literal?
5.What is loss of precision? why it occurs?
6.Why float range is more than int even both have 4bytes ?
https://stackoverflow.com/questions/13542944/how-many-significant-digits-do-floats-and-doubles-have-in-java
7.What is the difference between primitive and non primitive datatypes?
8.what is difference between final and finally keyword?
9.Explain the use of this and super keywords?
10.How are identifiers different from keywords?
11.Why is $ or _ allowed in identifiers but not recommended?
==============================================================
Arrays,variables,methods
1.What is an array in java?
2.What are advantages and disadvantages of an array?
3.What is difference between length and length()?
4.What are common exceptions occurs while dealing with arrays? How to avoid it?
5.What is an instance variable?
6.List the memories in JVM?
7.What is the scope of instance variable?
8.What is the difference between static method and instance method?
9.How static variable is different to instance variable?
10.Explain the use of different memory areas in JAVA?
11.Difference between the stack memory and heap memory?
12.What happens to the object after execution of a method?
13.Can we access an instance variable from the static area? Justify
14.Can we access an static fields from the instance area? Justify
15.Explain the scopes of instance ,static and local variables?
16. Explain how the String[] args parameter of the main method is created in Java.
===============================================================
operators and control statements
1.What is the difference between while loop and do-while loop?
2.Explain the scenerios where we can use the while loop?
3.Explain the behaviour of + operator?
4.What is the difference between pre-increment and post-increment operator?
5.What is the difference between & operator and && operator?
6.Explain about == operator?
7.What is the difference between == operator and equals() method?
8.Differnce between for loop and while loop?
9.Explain the work flow of for loop?
10.What is the difference between for loop and enhanced for loop?
11.Explain advantage of enhanced for loop?
12.How do shift operators (<<, >>, >>>) work in Java? Explain the difference between signed and unsigned shifts with examples.
13.How is the switch statement different from a series of if-else statements? Which one is more efficient?
14.Can a switch statement use String as a parameter? How does it work internally?
it uses hashcode and equals method for comparision
15.Can a switch statement use float as a parameter? Justify
16. What is the difference between break and continue? Provide an example
17.Can a for loop have multiple initialization and increment expressions? Provide an example.
18.What is the purpose of a default label in a switch statement? Is it mandatory to include it?
19.Explain the concept of "fall-through" in a switch statement. How can it be prevented?
20.Can break and continue be used inside a try-catch-finally block? If yes, how do they behave?
21.Can control statements like break or return be used inside a lambda expression? Why or why not?
Need to know about the stream api as well
22.What are all the datatypes applicable for the switch parameter?
23.Why float,double and long are not allowed as the switch parameter?If we have a scenario with float or double parameter how to use it 
24.How switch-case works wrt to primitives and Wrapper classes?
for primitives direct value comparision will happen
for wrappers it convert to primitive using auto unboxing 
25.Explain the comparision mechanism of switch-case w.r.t enum data type
It uses ordinal value for the comparision
26.Explain enhanced switch and yield keyword?
========================================================================
modifiers
1.What are access modifiers in Java? List them.
2.What is the difference between public, protected, default, and private access modifiers?
3.What is the default access modifier in Java if none is specified?
4.Can a top-level class be declared as private or protected? Why or why not?
5.What does the final modifier do for variables, methods, and classes?
6.What is the difference between static and final modifiers?
7.Can a class be declared as final? What are the implications?
8.What is the use of the static modifier in Java?
9.What does the abstract modifier mean for a class and a method?
10.What is the significance of the synchronized modifier in Java?
11.Can a method be declared as both abstract and final? Why or why not?
12.What is the difference between static and instance variables?
13.Can a constructor be declared as final, static, or abstract? Why?
14.What is the difference between transient and volatile modifiers in Java?
15.Can an interface method be declared as private or protected? Explain.
16.What happens if a final variable is not initialized?
17.What is the use of the native modifier in Java?
18.Can you override a private or static method in Java? Explain.
19.What is the difference between final and effectively final variables in Java?
20.Can a static method use non-static variables or methods directly? Why or why not?
21.What is the difference between synchronized and volatile in multithreading?
22.How do static blocks work in Java? When are they executed?
23.Can a final class be extended? If not, why?
24.How is the transient modifier used in serialization? Provide an example.
25.What are the key differences between volatile and atomic in Java?
26.Can you explain the role of strictfp in Java?
27.What is the purpose of the protected modifier in inheritance? How does it differ from default?
28.Can you use static methods in an interface? If yes, how is it different from default methods?
29.How do Java modifiers impact encapsulation and inheritance?
30.What are the implications of using final in Java's method arguments?
31.Write a program to demonstrate the difference between public, protected, default, and private access levels.
32.Show an example of how transient variables behave during serialization.
33.Write code to demonstrate the use of static and final together in a variable.
34.Create a multithreading example to illustrate the difference between synchronized and volatile.
35.Write a program to show the behavior of final methods in inheritance
=================================================================================

java source file structure

1.What is the standard structure of a Java source file? Can you explain each part?
2.What is the role of the package declaration in a Java source file? How does it affect the organization of classes?
3.How do you define a class in a Java source file, and what are the rules for naming a class?
4.What is the difference between a public class and a non-public class in terms of visibility and accessibility?
5.Can a Java source file contain multiple classes? If so, how are they organized within the file?
6.What is the significance of the import statement in a Java source file? How does it facilitate the use of classes from other packages?
7.What is the purpose of the main method in a Java application, and what is its signature?
8.Explain the difference between static and instance methods in the context of a Java class. How are they declared in the source file?
9.How do annotations fit into the structure of a Java source file? Can you provide an example of using annotations?
10.What are inner classes in Java? How are they defined within a source file?
11.How does the use of interfaces differ from abstract classes in Java? How are they defined in a source file?
12.What are the rules regarding file naming for Java source files, particularly in relation to public classes?
13.How can you specify the visibility of class members (fields and methods) in a Java source file? What are the different access modifiers available?
14.Can you explain the concept of JavaDoc comments? How are they structured, and why are they important?(writing the usage of the declared methods and what it does )
15.What is the difference between a Java source file and a compiled class file? What happens during the compilation process?
16.How do you handle exceptions in a Java source file? Can you explain the structure of try-catch blocks?
17.What is the purpose of constructors in Java? How are they defined within a class in a source file?
18.Can you explain how enums are defined in a Java source file? What is their purpose?
19.What is the role of the static block in a Java class, and how is it defined within a source file?
20.How can you use default access in Java, and how does it differ from other access modifiers?
=============================================================================

oops principles

encapsulation

1.What is encapsulation in Java?
2.How can you achieve encapsulation in a Java class?
3.What are access modifiers in Java, and how do they relate to encapsulation?
4.Can you provide an example of a simple Java class that demonstrates encapsulation?
5.Write a basic class with private fields and public getter and setter methods.
6.What are the advantages of encapsulation?
7.How does encapsulation improve the maintainability of code?
8.Can you explain how encapsulation relates to data hiding?
9.What happens if you try to access a private variable from outside its class?
10.How can encapsulation be implemented  with inheritance?
11.How to set the value of a private member?
12.Can you explain the difference between encapsulation and abstraction?
13.In what scenarios would you choose to use encapsulation over direct access to fields?
14.How does encapsulation affect the performance of a Java application?
15.What is immutable class in java? Write a code for custom immutable class?
16.Can you discuss the role of immutable objects in encapsulation?
17.How can encapsulation be applied in a multi-threaded environment?


abstraction
1.What is abstraction in Java?
2.Explain a scenario when to use an interface and when to use abstract class?
3.


inheritance
1.What is inheritance in Java?
2.Explain types of inheritance?
3.What is the difference between extends and implements keyword?
4.What is use of super and this keyword?
5. How can you prevent a class from being inherited in Java?
6. How can you restrict inheritance of a class to only specific subclasses in Java?
7.Does java supports multiple inheritance? Explain Why or Why not?
8. Which access modifiers enhance the ability to inherit from a class in Java, and which ones restrict it?
9.In how many ways we can restrict the inheritance in java?
10. In what context is the permits keyword used in Java?
11.What is the difference between a superclass and a subclass?
12.How do you implement inheritance in Java? Provide an example
13.Can a subclass access private members of its superclass? Explain why or why not.
14.Can a constructor in a subclass call a constructor of its superclass? How?
15.What happens when you create an object of a subclass?
16.How is method overriding different from method overloading in the context of inheritance?
17.How can you prevent a class from being subclassed?
18.How does inheritance promote code reusability? Provide an example.
19.Can a subclass have the same name as a method in its superclass? What happens?
20.What are abstract classes and how do they relate to inheritance?
21.Can you achieve polymorphism with inheritance? Explain how.
22.What is the diamond problem in inheritance, and how does Java handle it?
23.What is the role of the Object class in Java inheritance?
24.How does Java handle method resolution in the case of multiple inheritance using interfaces?
25.Can a class implement multiple interfaces that have the same method signature? What happens?
26.What is the difference between shallow copy and deep copy in the context of inheritance?

polymorphism

1.What is polymorphism?
2.What is overloading and overriding?
3.What is method hiding?
4.Can we override static methods? Explain Why or Why not?
5.Does overriding applicable for private methods? Explain 
6.Explain co-variant return type and its context?
7.Explain the overriding wrt to visbility of the method?
8.Explain the overriding wrt to propogation of exception (throws)?
9.Why can’t we achieve runtime polymorphism with static methods?
10.How does polymorphism relate to inheritance in Java?
11.What is the difference between upcasting and downcasting in polymorphism?
12.How is polymorphism implemented in the JVM (Virtual Method Table or vtable)?
13.What happens if you declare a method in a parent class as final and try to override it in a subclass?
14.How does polymorphism work with interfaces in Java?
15.Can a constructor be polymorphic? Why or why not?
16.What is the role of dynamic method dispatch in runtime polymorphism?
17.How does polymorphism help in designing extensible and maintainable applications?
18.Explain the difference between early binding and late binding. How does it relate to polymorphism?
19.How would you use polymorphism in designing a payment system (e.g., credit card, PayPal, UPI)?
20.Explain the use of polymorphism in the Java Collections Framework.
21.Describe a scenario where polymorphism can simplify adding new functionality to a system.



constructors
1.What is the use of constructor in Java?
2.What is default constructor in java?
3.What is difference between parameter less constructor and default constructor?
4.What are the modifiers applicable for constructors?
5.What is the use of super() and this() in java?
6.Can we have super() and this() together in a constructor? Explain
7.Explain why constructors are not applicable for the interfaces but we have constructors in abstract class .
8.Can we have a constructor in an Enum Explain with demo?
9.Can we create an object with out new keyword explain?(newInstance,while deserialising the object )
10.Can you overload constructors in Java? Provide an example.
11.Can a constructor call another constructor of the same class? How is it done?
12.In what scenarios would you prefer using factory methods over constructors?
13.What are static blocks, and how do they differ from constructors?
14.How does garbage collection affect objects created using constructors?
15.What is constructor chaining in Java? Explain with an example.
16.Why can't a constructor be final, abstract, or static?
17.If a parent class doesn't have a default constructor, what issues might arise in the child class?
18.Explain how constructors handle exception throwing in Java.?
19.What is constructor chaining in Java? Explain with an example.?
20.What happens if you explicitly define a constructor in your class? Does Java still provide a default constructor?
21.Can we declare a parameterized constructor in the parent class without defining any constructor in the child class?

design patterns

1.What is singleton pattern explain with code?
2.What are common design patterns?

static and instance flow

1.Explain why we cannot access instance members in static area?
2.How many times static blocks will be executed ? Explain
3.Explain the static and instance flow?
4.What is the difference between static variables and instance variables?
5.Can a static block throw an exception? If yes, provide an example.
6.Explain the sequence of execution of static blocks, instance blocks, and constructors.
7.How do static blocks differ from instance blocks?
8.What happens if an exception occurs inside a static block?
9.Can we have multiple static blocks in a class? How are they executed?
10.Can a static block access instance variables or methods? Why or why not?
11.What is the purpose of static blocks, and where are they commonly used?
12.Can we call the constructor from a static method? Explain.
13.How does JVM manage the memory of static variables?



======================================================================================
exception handling

1.What is an exception in Java? How is it different from an error?
2.What is the difference between checked and unchecked exceptions in Java?
3.What are the keywords used for exception handling in Java?
4.What is the purpose of the finally block in Java?
5.What happens if no exception is thrown in the try block? Will the finally block execute?
6.Can we have multiple catch blocks for a single try block?
7.What is the difference between throw and throws in Java?
8.What happens if an exception is not caught in a program?
9.What is the default exception handler in Java?
10.Can a try block exist without a catch block?
11.What happens if there is an exception in the finally block?
12.Can you explain exception chaining in Java? Provide an example.
13.Can you override a method in Java and throw new or broader checked exceptions? Why or why not?
14.What is the purpose of the getCause() method in Java exceptions?
15.What is the difference between final, finally, and finalize()?
16.Explain the use of try-with-resources. Why is it preferred over traditional try-catch-finally?
17.Can we write multiple finally blocks for a single try block? Why or why not?
18.What is a suppressed exception? How do you manage it in Java?
19.What is the order of execution for try, catch, and finally blocks in Java? Provide a code example to explain.
20.Can a finally block prevent the propagation of an exception? How?
21.Explain how exception suppression works in Java when using try-with-resources. Provide a code example.
22.What happens if both catch and finally blocks throw exceptions? Which one is propagated?
23.How would you design a custom exception hierarchy to handle multiple layers of application-specific exceptions?
24.Write a program to demonstrate the difference between re-throwing an exception with and without modifying its stack trace.
25.How does Java internally handle exception propagation in a multi-threaded environment?
26.Can you provide an example of a scenario where using checked exceptions would be better than unchecked exceptions?
27.What is the difference between RuntimeException and Error in Java? Provide examples where each is appropriate.
28.Explain how StackOverflowError and OutOfMemoryError are handled in Java. Can they be caught? Why or why not?
29.Write code to demonstrate exception handling when dealing with nested try-catch-finally blocks. What happens if there’s an exception in the inner and outer blocks?
30.Explain the implications of exception handling on performance. How can you optimize exception handling in Java?
31. What are some best practices to prevent unchecked exceptions in Java?
32. How would you troubleshoot and resolve an internal server error encountered by a user when making a request to your application?
33. What are some common exceptions encountered when working with collection classes and thread-related operations in Java?
34. What are the key methods available for handling exceptions in Java?
35. Can you describe a scenario in which the finally block does not execute in Java?
=====================================================================================================================
Object class

1.What is the Object class in Java?
2.Why is the Object class considered the root class in Java?
3.What are the key methods provided by the Object class?
4.What is the purpose of the equals() method in the Object class?
5.How does the hashCode() method work in the Object class?
6.Explain the toString() method in the Object class. Why is it useful?
7.What is the significance of the clone() method in the Object class?
8.Can you explain the finalize() method and its purpose?
9.How does the Object class support polymorphism in Java?
10.What happens when you call the getClass() method on an object?
11.What is the difference between == and equals() method when comparing objects?
12.How do you override the equals() and hashCode() methods correctly? Why is it important?
13.What is the purpose of the notify() and notifyAll() methods in the Object class?
14.Can you describe the wait() method and its significance in thread synchronization?
15.What is shallow copying and deep copying in the context of the clone() method?
16.Why is the finalize() method deprecated in Java?
17.How can you create a clone of an object using the clone() method?
18.What are some common pitfalls when overriding the equals() method?
19.Explain how you can use the Object class in Java's collection framework.
20.How does the Object class enable runtime type identification?
===============================================================
String class
1.What is the difference between String, StringBuilder, and StringBuffer?
2.Why is the String class immutable in Java, and what are the benefits of immutability?
3.Explain the String pool. How does it work in Java?
4.What is the difference between new String("example") and "example"?
5.How does String behave when passed as an argument to a method? Can it be modified?
6.How does Java manage memory for String objects?
7.Explain how String interning works. Why is it useful?
8.What is the impact of using + for String concatenation in loops, and how can it be optimized?
9.Discuss the performance difference between StringBuilder and + for string concatenation.
10.How are String objects stored in memory compared to primitive types?
11.Explain the purpose of the substring() method. Why did it have a memory leak issue in older versions of Java?
12.What is the difference between equals() and == when comparing strings?
13.How does the compareTo() method work in the String class?
14.Explain the functionality of split() and its potential pitfalls.
15.What does the trim() method do? How is it different from strip() introduced in Java 11?
16.How can you use regular expressions with the String class? Give an example with matches() or replaceAll().
17.How do you format strings using the String.format() method?
18.How would you use String.join() for concatenating strings with a delimiter?
19.How does the intern() method affect the performance and memory of the String pool?
20.Why is String declared as final in Java? What would happen if it were not final?
21.Explain the behavior of String.hashCode() and how it relates to equals().
22.Why is String considered thread-safe in Java?
23.Explain how storing sensitive data like passwords in String can lead to security issues. What alternatives would you use
24.Which memory of JVM is used by the String constant pool?
25.Explain about the toString(),hashCode() and equals() method of string class?
26.explain about the substring and exceptions it causes?
27.What is the strip() and trim() methods in Java?
28.What is difference between replace() and replaceAll() methods?
29.What is the use of chars() in java?
30.List the methods of String which are added in Java 8?
31.What is the main difference between String, StringBuilder, and StringBuffer?
32.When would you use StringBuilder over StringBuffer?
33.What are the advantages of using StringBuilder and StringBuffer compared to using String for string manipulation?
34.Can you explain the concept of mutability in the context of StringBuilder and StringBuffer?
35.Why is StringBuffer considered thread-safe while StringBuilder is not?
36.In what scenarios would you choose StringBuffer over StringBuilder?
37.How do the performance characteristics of StringBuilder and StringBuffer differ in multithreaded applications?
38.What methods are available in both StringBuilder and StringBuffer? Can you name a few commonly used methods?
39.How does the append() method work in StringBuilder and StringBuffer? Can you provide an example?
40.What is the purpose of the insert() method in StringBuilder and StringBuffer? How is it used?
41.How do you convert a StringBuilder or StringBuffer to a String?
42.Can you explain how the reverse() method works in StringBuilder and StringBuffer? Provide an example.
43.What is the initial capacity of StringBuilder and StringBuffer, and how does it grow?
44.How can you manually set the capacity of a StringBuilder or StringBuffer, and why would you want to do that?
45.What happens when you exceed the capacity of a StringBuilder or StringBuffer?
46.What is the difference between concat() and append () in Java?
47.In a scenario where you are constructing a large string in a loop, which class would you choose and why?
48.What are the best practices of String to avoid memory leaks?
49.Which is the better way to create the String objects literals or using new keyword? Explain why?
50.Why and how JVM checks the pool before creating an object in the pool but not in heap?
51.Explain the memory managemet wrt to heap area and pool wrt to String objects?



============================================================
Wrapper classes

1.What are autoboxing and unboxing in Java? How do they simplify working with primitive types and wrapper classes?
2.How many ways can an Integer object be created in Java? Explain each method with an example.
3.How can you convert a primitive int value to an Integer object in Java? Provide examples of different approaches.
4.What is NumberFormatException in Java? In which scenarios does this exception occur? Demonstrate with a code example.
5.Which methods are used to extract primitive values from wrapper objects in Java? Provide examples for common wrapper classes like Integer and Double.
6.What is the buffer constant pool in Java? How is it related to wrapper objects?
7.Under what circumstances does an Integer object use the heap area versus the buffer constant pool? Explain with examples.
8.What is the purpose of the parseInt() method in the Integer class? Provide a code example and discuss best practices to avoid exceptions like NumberFormatException.
9.What are the roles of the equals(), hashCode(), and toString() methods in wrapper classes? How are they implemented?
10.How can you perform conversions between primitive types and wrapper objects in Java? Provide examples for both autoboxing and explicit conversion.
11.Explain how wrapper classes support the Comparable and Serializable interfaces.
12.What is the behavior of Double.NaN, Double.POSITIVE_INFINITY, and Double.NEGATIVE_INFINITY in wrapper classes?
13.Explain the role of wrapper classes in Java Collections Framework.
14.What happens when a null value is unboxed into a primitive type?
15.Can you modify the cache behavior of Integer or Boolean wrapper classes? If yes, how?
16.How are wrapper classes different in Java 8 versus earlier versions?
17.Can you override the behavior of a wrapper class?
18.Why does Integer.valueOf(127) == Integer.valueOf(127) return true, but Integer.valueOf(128) == Integer.valueOf(128) return false?
19.What are the limitations of autoboxing and unboxing?
20.What happens when you use wrapper classes in multithreaded environments?
21.How do wrapper classes impact memory usage in enterprise applications?
22.What are the use cases where wrapper classes are preferred over primitive types?
23.Why are wrapper classes immutable? What are the advantages and disadvantages of this design?
24.How does the compareTo() method work in wrapper classes?
25.What are wrapper classes in Java? Why are they needed?
26.List all the wrapper classes in Java and their corresponding primitive types.
27.What is the difference between a primitive type and a wrapper class?
28.What is the default value of wrapper class objects in Java?
29.How do wrapper classes ensure immutability
30.What is integer cache explain?

========================================================================================
date time

1.What is LocalDate, LocalTime, and LocalDateTime in Java? How are they different from Date and Calendar?
2.How do you create a LocalDate object? Give an example.
3.How can you get the current date, time, and datetime in Java?
4.What is the purpose of the java.time package introduced in Java 8?
5.Can LocalDateTime be used with time zones? Why or why not?
6.How do you parse a date string into a LocalDate object?
	Example: Convert "2023-12-26" to a LocalDate.
7.How do you format a LocalDateTime into a custom string format?
	Example: Format LocalDateTime to "dd-MM-yyyy HH:mm".
8.How do you add or subtract days, months, or years from a LocalDate?
	Example: Add 10 days to the current date.
9.How can you find the difference between two dates using LocalDate?
10.What methods are available in LocalTime to manipulate time values?
	Example: Add 2 hours and 30 minutes to the current time.
11.How do you combine a LocalDate and LocalTime into a LocalDateTime?
12.How do you extract only the date or time from a LocalDateTime?
13.What is the difference between LocalDateTime and ZonedDateTime?
14.How do you check if a LocalDate is before or after another date?
15.How can you find the day of the week for a given LocalDate?
16.What exceptions might be thrown when working with LocalDate, LocalTime, or LocalDateTime?
17.What happens if you pass an invalid date (e.g., February 30th) to a LocalDate?
=====================================================================================================

collection frame work

1.What is the List interface in Java, and how is it different from a Set?
2.What are the common classes that implement the List interface?
	Example: ArrayList, LinkedList, Vector, Stack.
3.How is ArrayList different from LinkedList?
4.What is the difference between List and ArrayList?
5.How do you create a List instance in Java?
6.What are the key methods provided by the List interface?
	Examples: add(int index, E element), get(int index), remove(int index), set(int index, E element), subList(int fromIndex, int toIndex).
7.How do you sort a List in Java?
8.How do you convert an array into a List?
	Example: List<String> list = Arrays.asList(array);.
9.What is the difference between List.of() and Arrays.asList()?
10.What are the advantages and disadvantages of using ArrayList versus LinkedList?
11.What happens if you try to access an invalid index in a List?
	Example: list.get(-1) or list.get(size).
12.How does the remove(Object o) method of List work?
13.What happens if the object is not present in the List?
14.Explain the subList() method in the List interface.
15.What is the time complexity of common operations (like add, remove, get) in ArrayList and LinkedList?
16.How can you make a List thread-safe?
	Example: Collections.synchronizedList().
17.Explain how the equals() and hashCode() methods work in the context of a List.
18.What is the difference between ListIterator and Iterator?
19.How does ListIterator provide more functionality?
20.How do you reverse a List in Java?
21.What is the difference between add() and addAll() methods in the List interface?
22.How do you handle duplicate elements in a List?
23.How do you create a List instance from a Collection instance?
24.What happens if you try to modify an immutable List?
25.Can a List contain null elements? Are there any limitations?
26.Explain how HashSet works internally?
27.What is the Set interface in Java?
28.What are the key differences between Set and List interfaces?
29.Can you explain how the Set interface handles duplicate elements?
30.What are some common implementations of the Set interface?
31.What is the time complexity for common operations (add, remove, contains) in a HashSet?
32.How does HashSet handle collisions? (different objects with same hashcode,Understand buckets in hash table)
33.What are the differences between HashSet and TreeSet?
34.When would you choose HashSet over TreeSet or vice versa?
35.What is the initial capacity of a HashSet, and how does it grow?
36.What is a LinkedHashSet, and how is it different from HashSet?
37.How does LinkedHashSet achieve the ordering of elements?
38.What are the performance implications of using LinkedHashSet compared to HashSet?
39.What is a TreeSet, and what data structure does it use?
40.How does TreeSet maintain the order of its elements?
41.What are the time complexities for common operations in a TreeSet?
42.When would you use a TreeSet instead of a HashSet?
43.How do you synchronize a Set in a multi-threaded environment?
44.Can you explain the concept of a “fail-fast” iterator in the context of Sets?
45.What is the significance of the equals() and hashCode() methods in Sets?
46.How would you implement a custom object that can be stored in a Set?
47.Can you use null elements in a Set? If yes, how many nulls can you store in a HashSet vs. a TreeSet?
48.What happens if you add an object to a TreeSet that does not implement Comparable and no Comparator is provided?
49.
50.


==========================================================================
Functional Interfaces
1.What is functional interface?
2.Can we have other methods in Functional interface Explain?
3.Why Functional interface can have only one abstract method?
4.What is lamda expression?
5.List the in built function interfaces with respective abstract methods?
6.What is method reference ? Explain its types with a program?
7.Why we cannot reassign the local variable in the lamda expression?
8.What are the rules for defining a functional interface? How does the @FunctionalInterface annotation help?
9.What is the difference between a functional interface and a regular interface?
10.Can a functional interface extend another functional interface? If yes, what happens to the abstract method?
11.How does the equals() method from Object class fit into a functional interface?
12.What happens if a functional interface has a default method and a static method?
13.Explain the difference between Predicate and Function functional interfaces with examples.
14.What is the difference between a lambda expression and an anonymous inner class?
15.Explain how lambda expressions are compiled into bytecode.
16.
17.
18.
19.
20.
21.







